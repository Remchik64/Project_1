{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nconst useGeolocation = () => {\n  _s();\n  const [location, setLocation] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Получение города по IP через внешний сервис\n  const getCityByIP = async () => {\n    try {\n      const response = await axios.get('https://ipapi.co/json/');\n      return {\n        city: response.data.city,\n        latitude: response.data.latitude,\n        longitude: response.data.longitude\n      };\n    } catch (error) {\n      console.error('Ошибка при определении города по IP:', error);\n      return null;\n    }\n  };\n\n  // Получение города по координатам через Nominatim OpenStreetMap\n  const getCityByCoords = async (latitude, longitude) => {\n    try {\n      const response = await axios.get(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}`);\n      return {\n        city: response.data.address.city || response.data.address.town,\n        latitude,\n        longitude\n      };\n    } catch (error) {\n      console.error('Ошибка при определении города по координатам:', error);\n      return null;\n    }\n  };\n  useEffect(() => {\n    const getLocation = async () => {\n      try {\n        // Сначала пробуем получить геолокацию через браузер\n        if (navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(async position => {\n            const cityData = await getCityByCoords(position.coords.latitude, position.coords.longitude);\n            if (cityData) {\n              setLocation(cityData);\n            } else {\n              // Если не удалось получить город по координатам, пробуем по IP\n              const ipLocation = await getCityByIP();\n              setLocation(ipLocation);\n            }\n            setLoading(false);\n          }, async error => {\n            console.warn('Ошибка геолокации браузера:', error);\n            // Если геолокация через браузер не удалась, пробуем по IP\n            const ipLocation = await getCityByIP();\n            setLocation(ipLocation);\n            setLoading(false);\n          });\n        } else {\n          // Если геолокация не поддерживается, пробуем по IP\n          const ipLocation = await getCityByIP();\n          setLocation(ipLocation);\n          setLoading(false);\n        }\n      } catch (error) {\n        console.error('Ошибка при определении местоположения:', error);\n        setError(error);\n        setLoading(false);\n      }\n    };\n    getLocation();\n  }, []);\n  return {\n    location,\n    error,\n    loading\n  };\n};\n_s(useGeolocation, \"SDO+hqjOTxTHIbIxlN27liNwlw8=\");\nexport default useGeolocation;","map":{"version":3,"names":["useState","useEffect","axios","useGeolocation","_s","location","setLocation","error","setError","loading","setLoading","getCityByIP","response","get","city","data","latitude","longitude","console","getCityByCoords","address","town","getLocation","navigator","geolocation","getCurrentPosition","position","cityData","coords","ipLocation","warn"],"sources":["C:/Users/user/Desktop/sait-znakomstv/frontend/src/hooks/useGeolocation.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst useGeolocation = () => {\r\n  const [location, setLocation] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Получение города по IP через внешний сервис\r\n  const getCityByIP = async () => {\r\n    try {\r\n      const response = await axios.get('https://ipapi.co/json/');\r\n      return {\r\n        city: response.data.city,\r\n        latitude: response.data.latitude,\r\n        longitude: response.data.longitude\r\n      };\r\n    } catch (error) {\r\n      console.error('Ошибка при определении города по IP:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Получение города по координатам через Nominatim OpenStreetMap\r\n  const getCityByCoords = async (latitude, longitude) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}`\r\n      );\r\n      return {\r\n        city: response.data.address.city || response.data.address.town,\r\n        latitude,\r\n        longitude\r\n      };\r\n    } catch (error) {\r\n      console.error('Ошибка при определении города по координатам:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getLocation = async () => {\r\n      try {\r\n        // Сначала пробуем получить геолокацию через браузер\r\n        if (navigator.geolocation) {\r\n          navigator.geolocation.getCurrentPosition(\r\n            async (position) => {\r\n              const cityData = await getCityByCoords(\r\n                position.coords.latitude,\r\n                position.coords.longitude\r\n              );\r\n              if (cityData) {\r\n                setLocation(cityData);\r\n              } else {\r\n                // Если не удалось получить город по координатам, пробуем по IP\r\n                const ipLocation = await getCityByIP();\r\n                setLocation(ipLocation);\r\n              }\r\n              setLoading(false);\r\n            },\r\n            async (error) => {\r\n              console.warn('Ошибка геолокации браузера:', error);\r\n              // Если геолокация через браузер не удалась, пробуем по IP\r\n              const ipLocation = await getCityByIP();\r\n              setLocation(ipLocation);\r\n              setLoading(false);\r\n            }\r\n          );\r\n        } else {\r\n          // Если геолокация не поддерживается, пробуем по IP\r\n          const ipLocation = await getCityByIP();\r\n          setLocation(ipLocation);\r\n          setLoading(false);\r\n        }\r\n      } catch (error) {\r\n        console.error('Ошибка при определении местоположения:', error);\r\n        setError(error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    getLocation();\r\n  }, []);\r\n\r\n  return { location, error, loading };\r\n};\r\n\r\nexport default useGeolocation; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}