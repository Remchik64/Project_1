{"ast":null,"code":"// Настройка axios по умолчанию\nimport axios from 'axios';\n\n// Получение базового URL API из переменных окружения\nexport const getApiUrl = endpoint => {\n  // В production используем URL из переменной окружения или текущий домен\n  const baseUrl = process.env.REACT_APP_API_URL || window.location.origin;\n\n  // Убеждаемся, что используем HTTPS в production\n  const secureBaseUrl = baseUrl.replace('http://', 'https://');\n\n  // Удаляем слеш в конце baseUrl, если он есть\n  const cleanBaseUrl = secureBaseUrl.endsWith('/') ? secureBaseUrl.slice(0, -1) : secureBaseUrl;\n  // Добавляем слеш в начало endpoint, если его нет\n  const cleanEndpoint = endpoint.startsWith('/') ? endpoint : `/${endpoint}`;\n  const fullUrl = `${cleanBaseUrl}${cleanEndpoint}`;\n  console.log('API URL:', {\n    baseUrl,\n    secureBaseUrl,\n    fullUrl\n  });\n  return fullUrl;\n};\n\n// Получение URL для загрузок\nexport const getUploadUrl = path => {\n  if (!path) return '';\n\n  // В production используем URL из переменной окружения или текущий домен\n  const baseUrl = process.env.REACT_APP_API_URL || window.location.origin;\n  const secureBaseUrl = baseUrl.replace('http://', 'https://');\n\n  // Если путь уже содержит полный URL, убеждаемся что он HTTPS\n  if (path.startsWith('http')) {\n    return path.replace('http://', 'https://');\n  }\n\n  // Удаляем слеш в конце baseUrl, если он есть\n  const cleanBaseUrl = secureBaseUrl.endsWith('/') ? secureBaseUrl.slice(0, -1) : secureBaseUrl;\n  // Добавляем слеш в начало path, если его нет\n  const cleanPath = path.startsWith('/') ? path : `/${path}`;\n  const fullUrl = `${cleanBaseUrl}${cleanPath}`;\n  console.log('Upload URL:', {\n    baseUrl,\n    secureBaseUrl,\n    fullUrl\n  });\n  return fullUrl;\n};\n\n// Получение URL для медиа-файлов\nexport const getMediaUrl = path => {\n  if (!path) return null;\n\n  // В production используем URL из переменной окружения или текущий домен\n  const baseUrl = process.env.REACT_APP_API_URL || window.location.origin;\n  const secureBaseUrl = baseUrl.replace('http://', 'https://');\n\n  // Если путь уже содержит полный URL, убеждаемся что он HTTPS\n  if (path.startsWith('http')) {\n    return path.replace('http://', 'https://');\n  }\n  const fullUrl = `${secureBaseUrl}${path}`;\n  console.log('Media URL:', {\n    baseUrl,\n    secureBaseUrl,\n    fullUrl\n  });\n  return fullUrl;\n};\n\n// Настройка глобальных параметров axios\naxios.defaults.baseURL = getApiUrl('');\naxios.defaults.headers.common['Accept'] = 'application/json';\naxios.defaults.headers.common['Cache-Control'] = 'no-cache';\n\n// Добавляем перехватчик для добавления токена к запросам\naxios.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n\n  // Убеждаемся, что все URL используют HTTPS\n  if (config.url && config.url.startsWith('http://')) {\n    config.url = config.url.replace('http://', 'https://');\n  }\n  console.log('Request:', {\n    url: config.url,\n    method: config.method,\n    headers: config.headers\n  });\n  return config;\n}, error => {\n  console.error('Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Добавляем перехватчик для обработки ошибок\naxios.interceptors.response.use(response => response, error => {\n  if (error.response) {\n    if (error.response.status === 401) {\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    console.error('Response Error:', {\n      status: error.response.status,\n      data: error.response.data,\n      headers: error.response.headers\n    });\n  } else if (error.request) {\n    console.error('Network Error:', {\n      message: error.message,\n      request: error.request\n    });\n  } else {\n    console.error('Error:', error.message);\n  }\n  return Promise.reject(error);\n});","map":{"version":3,"names":["axios","getApiUrl","endpoint","baseUrl","process","env","REACT_APP_API_URL","window","location","origin","secureBaseUrl","replace","cleanBaseUrl","endsWith","slice","cleanEndpoint","startsWith","fullUrl","console","log","getUploadUrl","path","cleanPath","getMediaUrl","defaults","baseURL","headers","common","interceptors","request","use","config","token","localStorage","getItem","Authorization","url","method","error","Promise","reject","response","status","removeItem","href","data","message"],"sources":["C:/Users/user/Desktop/sait-znakomstv/frontend/src/config/api.js"],"sourcesContent":["// Настройка axios по умолчанию\r\nimport axios from 'axios';\r\n\r\n// Получение базового URL API из переменных окружения\r\nexport const getApiUrl = (endpoint) => {\r\n    // В production используем URL из переменной окружения или текущий домен\r\n    const baseUrl = process.env.REACT_APP_API_URL || window.location.origin;\r\n    \r\n    // Убеждаемся, что используем HTTPS в production\r\n    const secureBaseUrl = baseUrl.replace('http://', 'https://');\r\n    \r\n    // Удаляем слеш в конце baseUrl, если он есть\r\n    const cleanBaseUrl = secureBaseUrl.endsWith('/') ? secureBaseUrl.slice(0, -1) : secureBaseUrl;\r\n    // Добавляем слеш в начало endpoint, если его нет\r\n    const cleanEndpoint = endpoint.startsWith('/') ? endpoint : `/${endpoint}`;\r\n    \r\n    const fullUrl = `${cleanBaseUrl}${cleanEndpoint}`;\r\n    console.log('API URL:', { baseUrl, secureBaseUrl, fullUrl });\r\n    return fullUrl;\r\n};\r\n\r\n// Получение URL для загрузок\r\nexport const getUploadUrl = (path) => {\r\n    if (!path) return '';\r\n    \r\n    // В production используем URL из переменной окружения или текущий домен\r\n    const baseUrl = process.env.REACT_APP_API_URL || window.location.origin;\r\n    const secureBaseUrl = baseUrl.replace('http://', 'https://');\r\n\r\n    // Если путь уже содержит полный URL, убеждаемся что он HTTPS\r\n    if (path.startsWith('http')) {\r\n        return path.replace('http://', 'https://');\r\n    }\r\n\r\n    // Удаляем слеш в конце baseUrl, если он есть\r\n    const cleanBaseUrl = secureBaseUrl.endsWith('/') ? secureBaseUrl.slice(0, -1) : secureBaseUrl;\r\n    // Добавляем слеш в начало path, если его нет\r\n    const cleanPath = path.startsWith('/') ? path : `/${path}`;\r\n    \r\n    const fullUrl = `${cleanBaseUrl}${cleanPath}`;\r\n    console.log('Upload URL:', { baseUrl, secureBaseUrl, fullUrl });\r\n    return fullUrl;\r\n};\r\n\r\n// Получение URL для медиа-файлов\r\nexport const getMediaUrl = (path) => {\r\n    if (!path) return null;\r\n    \r\n    // В production используем URL из переменной окружения или текущий домен\r\n    const baseUrl = process.env.REACT_APP_API_URL || window.location.origin;\r\n    const secureBaseUrl = baseUrl.replace('http://', 'https://');\r\n\r\n    // Если путь уже содержит полный URL, убеждаемся что он HTTPS\r\n    if (path.startsWith('http')) {\r\n        return path.replace('http://', 'https://');\r\n    }\r\n\r\n    const fullUrl = `${secureBaseUrl}${path}`;\r\n    console.log('Media URL:', { baseUrl, secureBaseUrl, fullUrl });\r\n    return fullUrl;\r\n};\r\n\r\n// Настройка глобальных параметров axios\r\naxios.defaults.baseURL = getApiUrl('');\r\naxios.defaults.headers.common['Accept'] = 'application/json';\r\naxios.defaults.headers.common['Cache-Control'] = 'no-cache';\r\n\r\n// Добавляем перехватчик для добавления токена к запросам\r\naxios.interceptors.request.use(\r\n    config => {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        \r\n        // Убеждаемся, что все URL используют HTTPS\r\n        if (config.url && config.url.startsWith('http://')) {\r\n            config.url = config.url.replace('http://', 'https://');\r\n        }\r\n        \r\n        console.log('Request:', {\r\n            url: config.url,\r\n            method: config.method,\r\n            headers: config.headers\r\n        });\r\n        return config;\r\n    },\r\n    error => {\r\n        console.error('Request Error:', error);\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Добавляем перехватчик для обработки ошибок\r\naxios.interceptors.response.use(\r\n    response => response,\r\n    error => {\r\n        if (error.response) {\r\n            if (error.response.status === 401) {\r\n                localStorage.removeItem('token');\r\n                window.location.href = '/login';\r\n            }\r\n            console.error('Response Error:', {\r\n                status: error.response.status,\r\n                data: error.response.data,\r\n                headers: error.response.headers\r\n            });\r\n        } else if (error.request) {\r\n            console.error('Network Error:', {\r\n                message: error.message,\r\n                request: error.request\r\n            });\r\n        } else {\r\n            console.error('Error:', error.message);\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}