{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nconst useGeolocation = () => {\n  _s();\n  const [location, setLocation] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Получение города по IP через внешний сервис\n  const getCityByIP = async () => {\n    try {\n      // Используем сервис с поддержкой CORS\n      const response = await axios.get('http://ip-api.com/json/?fields=status,message,country,city,lat,lon&lang=ru');\n      if (response.data.status === 'success') {\n        return {\n          city: response.data.city,\n          latitude: response.data.lat,\n          longitude: response.data.lon\n        };\n      } else {\n        console.error('Ошибка при определении города:', response.data.message);\n        return null;\n      }\n    } catch (error) {\n      console.error('Ошибка при определении города по IP:', error);\n      return null;\n    }\n  };\n  useEffect(() => {\n    const getLocation = async () => {\n      try {\n        const ipLocation = await getCityByIP();\n        if (ipLocation) {\n          console.log('Определено местоположение:', ipLocation);\n          setLocation(ipLocation);\n        } else {\n          setError('Не удалось определить город');\n        }\n      } catch (error) {\n        console.error('Ошибка при определении местоположения:', error);\n        setError('Ошибка при определении местоположения');\n      } finally {\n        setLoading(false);\n      }\n    };\n    getLocation();\n  }, []);\n  return {\n    location,\n    error,\n    loading\n  };\n};\n_s(useGeolocation, \"SDO+hqjOTxTHIbIxlN27liNwlw8=\");\nexport default useGeolocation;","map":{"version":3,"names":["useState","useEffect","axios","useGeolocation","_s","location","setLocation","error","setError","loading","setLoading","getCityByIP","response","get","data","status","city","latitude","lat","longitude","lon","console","message","getLocation","ipLocation","log"],"sources":["C:/Users/user/Desktop/sait-znakomstv/frontend/src/hooks/useGeolocation.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst useGeolocation = () => {\r\n  const [location, setLocation] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Получение города по IP через внешний сервис\r\n  const getCityByIP = async () => {\r\n    try {\r\n      // Используем сервис с поддержкой CORS\r\n      const response = await axios.get('http://ip-api.com/json/?fields=status,message,country,city,lat,lon&lang=ru');\r\n      \r\n      if (response.data.status === 'success') {\r\n        return {\r\n          city: response.data.city,\r\n          latitude: response.data.lat,\r\n          longitude: response.data.lon\r\n        };\r\n      } else {\r\n        console.error('Ошибка при определении города:', response.data.message);\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error('Ошибка при определении города по IP:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getLocation = async () => {\r\n      try {\r\n        const ipLocation = await getCityByIP();\r\n        if (ipLocation) {\r\n          console.log('Определено местоположение:', ipLocation);\r\n          setLocation(ipLocation);\r\n        } else {\r\n          setError('Не удалось определить город');\r\n        }\r\n      } catch (error) {\r\n        console.error('Ошибка при определении местоположения:', error);\r\n        setError('Ошибка при определении местоположения');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    getLocation();\r\n  }, []);\r\n\r\n  return { location, error, loading };\r\n};\r\n\r\nexport default useGeolocation; "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACA,MAAMW,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,4EAA4E,CAAC;MAE9G,IAAID,QAAQ,CAACE,IAAI,CAACC,MAAM,KAAK,SAAS,EAAE;QACtC,OAAO;UACLC,IAAI,EAAEJ,QAAQ,CAACE,IAAI,CAACE,IAAI;UACxBC,QAAQ,EAAEL,QAAQ,CAACE,IAAI,CAACI,GAAG;UAC3BC,SAAS,EAAEP,QAAQ,CAACE,IAAI,CAACM;QAC3B,CAAC;MACH,CAAC,MAAM;QACLC,OAAO,CAACd,KAAK,CAAC,gCAAgC,EAAEK,QAAQ,CAACE,IAAI,CAACQ,OAAO,CAAC;QACtE,OAAO,IAAI;MACb;IACF,CAAC,CAAC,OAAOf,KAAK,EAAE;MACdc,OAAO,CAACd,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC5D,OAAO,IAAI;IACb;EACF,CAAC;EAEDN,SAAS,CAAC,MAAM;IACd,MAAMsB,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACF,MAAMC,UAAU,GAAG,MAAMb,WAAW,CAAC,CAAC;QACtC,IAAIa,UAAU,EAAE;UACdH,OAAO,CAACI,GAAG,CAAC,4BAA4B,EAAED,UAAU,CAAC;UACrDlB,WAAW,CAACkB,UAAU,CAAC;QACzB,CAAC,MAAM;UACLhB,QAAQ,CAAC,6BAA6B,CAAC;QACzC;MACF,CAAC,CAAC,OAAOD,KAAK,EAAE;QACdc,OAAO,CAACd,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;QAC9DC,QAAQ,CAAC,uCAAuC,CAAC;MACnD,CAAC,SAAS;QACRE,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDa,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAElB,QAAQ;IAAEE,KAAK;IAAEE;EAAQ,CAAC;AACrC,CAAC;AAACL,EAAA,CAjDID,cAAc;AAmDpB,eAAeA,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}