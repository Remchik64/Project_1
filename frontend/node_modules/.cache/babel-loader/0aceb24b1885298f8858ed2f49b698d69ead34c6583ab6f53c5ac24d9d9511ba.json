{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { getApiUrl } from '../config/api';\nconst useGeolocation = () => {\n  _s();\n  const [location, setLocation] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchLocation = async () => {\n      try {\n        console.log('Начинаем определение геолокации через бэкенд...');\n        const apiUrl = getApiUrl('/api/geolocation');\n        console.log('URL запроса геолокации:', apiUrl);\n        const response = await axios.get(apiUrl, {\n          headers: {\n            'Accept': 'application/json',\n            'Cache-Control': 'no-cache'\n          }\n        });\n        console.log('Тип данных ответа:', typeof response.data);\n        console.log('Содержимое ответа:', response.data);\n        if (response.data && response.data.city) {\n          const locationData = {\n            city: response.data.city,\n            country: response.data.country,\n            latitude: response.data.latitude,\n            longitude: response.data.longitude,\n            region: response.data.region,\n            isRegionalCenter: response.data.isRegionalCenter\n          };\n          console.log('Местоположение успешно определено:', locationData);\n          setLocation(locationData);\n        } else {\n          console.error('Ответ от сервера не содержит данных о городе:', response.data);\n          throw new Error('Не удалось определить местоположение');\n        }\n      } catch (error) {\n        var _error$response, _error$response2;\n        console.error('Ошибка при определении города:', error);\n        console.error('Детали ошибки:', {\n          message: error.message,\n          response: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data,\n          status: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status,\n          stack: error.stack\n        });\n        setError('Не удалось определить ваше местоположение');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchLocation();\n  }, []);\n  return {\n    location,\n    error,\n    loading\n  };\n};\n_s(useGeolocation, \"SDO+hqjOTxTHIbIxlN27liNwlw8=\");\nexport default useGeolocation;","map":{"version":3,"names":["useState","useEffect","axios","getApiUrl","useGeolocation","_s","location","setLocation","error","setError","loading","setLoading","fetchLocation","console","log","apiUrl","response","get","headers","data","city","locationData","country","latitude","longitude","region","isRegionalCenter","Error","_error$response","_error$response2","message","status","stack"],"sources":["C:/Users/user/Desktop/sait-znakomstv/frontend/src/hooks/useGeolocation.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { getApiUrl } from '../config/api';\r\n\r\nconst useGeolocation = () => {\r\n  const [location, setLocation] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchLocation = async () => {\r\n      try {\r\n        console.log('Начинаем определение геолокации через бэкенд...');\r\n        const apiUrl = getApiUrl('/api/geolocation');\r\n        console.log('URL запроса геолокации:', apiUrl);\r\n\r\n        const response = await axios.get(apiUrl, {\r\n          headers: {\r\n            'Accept': 'application/json',\r\n            'Cache-Control': 'no-cache'\r\n          }\r\n        });\r\n        \r\n        console.log('Тип данных ответа:', typeof response.data);\r\n        console.log('Содержимое ответа:', response.data);\r\n\r\n        if (response.data && response.data.city) {\r\n          const locationData = {\r\n            city: response.data.city,\r\n            country: response.data.country,\r\n            latitude: response.data.latitude,\r\n            longitude: response.data.longitude,\r\n            region: response.data.region,\r\n            isRegionalCenter: response.data.isRegionalCenter\r\n          };\r\n          \r\n          console.log('Местоположение успешно определено:', locationData);\r\n          setLocation(locationData);\r\n        } else {\r\n          console.error('Ответ от сервера не содержит данных о городе:', response.data);\r\n          throw new Error('Не удалось определить местоположение');\r\n        }\r\n      } catch (error) {\r\n        console.error('Ошибка при определении города:', error);\r\n        console.error('Детали ошибки:', {\r\n          message: error.message,\r\n          response: error.response?.data,\r\n          status: error.response?.status,\r\n          stack: error.stack\r\n        });\r\n        setError('Не удалось определить ваше местоположение');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchLocation();\r\n  }, []);\r\n\r\n  return { location, error, loading };\r\n};\r\n\r\nexport default useGeolocation; "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,eAAe;AAEzC,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd,MAAMW,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACFC,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;QAC9D,MAAMC,MAAM,GAAGZ,SAAS,CAAC,kBAAkB,CAAC;QAC5CU,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEC,MAAM,CAAC;QAE9C,MAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAG,CAACF,MAAM,EAAE;UACvCG,OAAO,EAAE;YACP,QAAQ,EAAE,kBAAkB;YAC5B,eAAe,EAAE;UACnB;QACF,CAAC,CAAC;QAEFL,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE,OAAOE,QAAQ,CAACG,IAAI,CAAC;QACvDN,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEE,QAAQ,CAACG,IAAI,CAAC;QAEhD,IAAIH,QAAQ,CAACG,IAAI,IAAIH,QAAQ,CAACG,IAAI,CAACC,IAAI,EAAE;UACvC,MAAMC,YAAY,GAAG;YACnBD,IAAI,EAAEJ,QAAQ,CAACG,IAAI,CAACC,IAAI;YACxBE,OAAO,EAAEN,QAAQ,CAACG,IAAI,CAACG,OAAO;YAC9BC,QAAQ,EAAEP,QAAQ,CAACG,IAAI,CAACI,QAAQ;YAChCC,SAAS,EAAER,QAAQ,CAACG,IAAI,CAACK,SAAS;YAClCC,MAAM,EAAET,QAAQ,CAACG,IAAI,CAACM,MAAM;YAC5BC,gBAAgB,EAAEV,QAAQ,CAACG,IAAI,CAACO;UAClC,CAAC;UAEDb,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEO,YAAY,CAAC;UAC/Dd,WAAW,CAACc,YAAY,CAAC;QAC3B,CAAC,MAAM;UACLR,OAAO,CAACL,KAAK,CAAC,+CAA+C,EAAEQ,QAAQ,CAACG,IAAI,CAAC;UAC7E,MAAM,IAAIQ,KAAK,CAAC,sCAAsC,CAAC;QACzD;MACF,CAAC,CAAC,OAAOnB,KAAK,EAAE;QAAA,IAAAoB,eAAA,EAAAC,gBAAA;QACdhB,OAAO,CAACL,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;QACtDK,OAAO,CAACL,KAAK,CAAC,gBAAgB,EAAE;UAC9BsB,OAAO,EAAEtB,KAAK,CAACsB,OAAO;UACtBd,QAAQ,GAAAY,eAAA,GAAEpB,KAAK,CAACQ,QAAQ,cAAAY,eAAA,uBAAdA,eAAA,CAAgBT,IAAI;UAC9BY,MAAM,GAAAF,gBAAA,GAAErB,KAAK,CAACQ,QAAQ,cAAAa,gBAAA,uBAAdA,gBAAA,CAAgBE,MAAM;UAC9BC,KAAK,EAAExB,KAAK,CAACwB;QACf,CAAC,CAAC;QACFvB,QAAQ,CAAC,2CAA2C,CAAC;MACvD,CAAC,SAAS;QACRE,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEN,QAAQ;IAAEE,KAAK;IAAEE;EAAQ,CAAC;AACrC,CAAC;AAACL,EAAA,CAxDID,cAAc;AA0DpB,eAAeA,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}