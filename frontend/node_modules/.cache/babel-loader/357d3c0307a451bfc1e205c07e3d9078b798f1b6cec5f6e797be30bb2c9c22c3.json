{"ast":null,"code":"// Настройка axios по умолчанию\nimport axios from 'axios';\n\n// Определяем базовый URL API в зависимости от окружения\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Функция для формирования полного URL API\nexport const getApiUrl = endpoint => {\n  // Убираем лишний слэш в начале endpoint, если он есть\n  const cleanEndpoint = endpoint.startsWith('/') ? endpoint.slice(1) : endpoint;\n  return `${API_BASE_URL}/${cleanEndpoint}`;\n};\n\n// Функция для формирования полного URL для медиа-файлов\nexport const getMediaUrl = path => {\n  if (!path) return null;\n  // Убираем лишний слэш в начале path, если он есть\n  const cleanPath = path.startsWith('/') ? path.slice(1) : path;\n  return `${API_BASE_URL}/${cleanPath}`;\n};\n\n// Добавляем перехватчик для добавления токена к запросам\naxios.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Добавляем перехватчик для обработки ошибок\naxios.interceptors.response.use(response => response, error => {\n  if (error.response) {\n    // Если сервер вернул ошибку 401 (неавторизован), очищаем токен\n    if (error.response.status === 401) {\n      localStorage.removeItem('token');\n      window.location.href = '/';\n    }\n    console.error('Response data:', error.response.data);\n    console.error('Response status:', error.response.status);\n  }\n  return Promise.reject(error);\n});\n\n// Конфигурация для axios\nexport const apiConfig = {\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n};\nexport default {\n  API_BASE_URL,\n  getApiUrl,\n  getMediaUrl,\n  apiConfig\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","getApiUrl","endpoint","cleanEndpoint","startsWith","slice","getMediaUrl","path","cleanPath","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","response","status","removeItem","window","location","href","console","data","apiConfig","baseURL"],"sources":["C:/Users/user/Desktop/Sait-znakomstv2/frontend/src/config/api.js"],"sourcesContent":["// Настройка axios по умолчанию\r\nimport axios from 'axios';\r\n\r\n// Определяем базовый URL API в зависимости от окружения\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n// Функция для формирования полного URL API\r\nexport const getApiUrl = (endpoint) => {\r\n    // Убираем лишний слэш в начале endpoint, если он есть\r\n    const cleanEndpoint = endpoint.startsWith('/') ? endpoint.slice(1) : endpoint;\r\n    return `${API_BASE_URL}/${cleanEndpoint}`;\r\n};\r\n\r\n// Функция для формирования полного URL для медиа-файлов\r\nexport const getMediaUrl = (path) => {\r\n    if (!path) return null;\r\n    // Убираем лишний слэш в начале path, если он есть\r\n    const cleanPath = path.startsWith('/') ? path.slice(1) : path;\r\n    return `${API_BASE_URL}/${cleanPath}`;\r\n};\r\n\r\n// Добавляем перехватчик для добавления токена к запросам\r\naxios.interceptors.request.use(\r\n    config => {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n    },\r\n    error => {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Добавляем перехватчик для обработки ошибок\r\naxios.interceptors.response.use(\r\n    response => response,\r\n    error => {\r\n        if (error.response) {\r\n            // Если сервер вернул ошибку 401 (неавторизован), очищаем токен\r\n            if (error.response.status === 401) {\r\n                localStorage.removeItem('token');\r\n                window.location.href = '/';\r\n            }\r\n            console.error('Response data:', error.response.data);\r\n            console.error('Response status:', error.response.status);\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Конфигурация для axios\r\nexport const apiConfig = {\r\n    baseURL: API_BASE_URL,\r\n    headers: {\r\n        'Content-Type': 'application/json'\r\n    }\r\n};\r\n\r\nexport default {\r\n    API_BASE_URL,\r\n    getApiUrl,\r\n    getMediaUrl,\r\n    apiConfig\r\n}; "],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;;AAE7E;AACA,OAAO,MAAMC,SAAS,GAAIC,QAAQ,IAAK;EACnC;EACA,MAAMC,aAAa,GAAGD,QAAQ,CAACE,UAAU,CAAC,GAAG,CAAC,GAAGF,QAAQ,CAACG,KAAK,CAAC,CAAC,CAAC,GAAGH,QAAQ;EAC7E,OAAO,GAAGL,YAAY,IAAIM,aAAa,EAAE;AAC7C,CAAC;;AAED;AACA,OAAO,MAAMG,WAAW,GAAIC,IAAI,IAAK;EACjC,IAAI,CAACA,IAAI,EAAE,OAAO,IAAI;EACtB;EACA,MAAMC,SAAS,GAAGD,IAAI,CAACH,UAAU,CAAC,GAAG,CAAC,GAAGG,IAAI,CAACF,KAAK,CAAC,CAAC,CAAC,GAAGE,IAAI;EAC7D,OAAO,GAAGV,YAAY,IAAIW,SAAS,EAAE;AACzC,CAAC;;AAED;AACAZ,KAAK,CAACa,YAAY,CAACC,OAAO,CAACC,GAAG,CAC1BC,MAAM,IAAI;EACN,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACPD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EACpD;EACA,OAAOD,MAAM;AACjB,CAAC,EACDM,KAAK,IAAI;EACL,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACAtB,KAAK,CAACa,YAAY,CAACY,QAAQ,CAACV,GAAG,CAC3BU,QAAQ,IAAIA,QAAQ,EACpBH,KAAK,IAAI;EACL,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAChB;IACA,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;MAC/BR,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;MAChCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG;IAC9B;IACAC,OAAO,CAACT,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAACG,QAAQ,CAACO,IAAI,CAAC;IACpDD,OAAO,CAACT,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAACG,QAAQ,CAACC,MAAM,CAAC;EAC5D;EACA,OAAOH,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACA,OAAO,MAAMW,SAAS,GAAG;EACrBC,OAAO,EAAEjC,YAAY;EACrBmB,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC;AAED,eAAe;EACXnB,YAAY;EACZI,SAAS;EACTK,WAAW;EACXuB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}