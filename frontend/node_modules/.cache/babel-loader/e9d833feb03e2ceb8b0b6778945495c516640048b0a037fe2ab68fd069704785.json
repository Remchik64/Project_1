{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { getApiUrl, getMediaUrl } from '../config/api';\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BackgroundProvider = ({\n  children\n}) => {\n  _s();\n  const [settings, setSettings] = useState(null);\n  const updateBackground = data => {\n    console.log('Обновление фона с данными:', data);\n\n    // Применяем фон сайта\n    if (data.siteBackground === 'image' && data.siteBackgroundImage) {\n      const imageUrl = getMediaUrl(data.siteBackgroundImage);\n      console.log('Применяем фоновое изображение сайта:', imageUrl);\n      document.documentElement.style.backgroundImage = `url(${imageUrl})`;\n      document.documentElement.style.backgroundSize = 'cover';\n      document.documentElement.style.backgroundPosition = 'center';\n      document.documentElement.style.backgroundAttachment = 'fixed';\n      document.documentElement.style.backgroundRepeat = 'no-repeat';\n      document.documentElement.style.backgroundColor = 'transparent';\n\n      // Убеждаемся, что body не перекрывает фон\n      document.body.style.background = 'none';\n      document.body.style.backgroundColor = 'transparent';\n    } else {\n      console.log('Применяем цветовой фон сайта:', data.siteBackgroundColor);\n      document.documentElement.style.backgroundImage = 'none';\n      document.documentElement.style.backgroundColor = data.siteBackgroundColor || '#f5f5f5';\n      document.body.style.background = 'none';\n      document.body.style.backgroundColor = 'transparent';\n    }\n\n    // Получаем элемент шапки\n    const headerElement = document.querySelector('.navigation');\n    if (headerElement) {\n      // Применяем фон шапки\n      if (data.headerBackground === 'image' && data.headerBackgroundImage) {\n        const headerImageUrl = getMediaUrl(data.headerBackgroundImage);\n        console.log('Применяем фоновое изображение шапки:', headerImageUrl);\n        headerElement.style.backgroundImage = `url(${headerImageUrl})`;\n        headerElement.style.backgroundSize = 'cover';\n        headerElement.style.backgroundPosition = 'center';\n        headerElement.style.backgroundColor = 'transparent';\n      } else {\n        console.log('Применяем цветовой фон шапки:', data.headerBackgroundColor);\n        headerElement.style.backgroundImage = 'none';\n        headerElement.style.backgroundColor = data.headerBackgroundColor || '#ffffff';\n      }\n    }\n    console.log('Применены настройки фона:', {\n      type: data.siteBackground,\n      image: data.siteBackgroundImage,\n      color: data.siteBackgroundColor\n    });\n  };\n  useEffect(() => {\n    const fetchSettings = async () => {\n      try {\n        console.log('Загрузка настроек фона...');\n        const response = await axios.get(getApiUrl('/api/site-settings'));\n        console.log('Получены настройки:', response.data);\n        setSettings(response.data);\n        updateBackground(response.data);\n      } catch (error) {\n        console.error('Ошибка при загрузке настроек фона:', error);\n        // Устанавливаем фон по умолчанию\n        document.documentElement.style.backgroundImage = 'none';\n        document.documentElement.style.backgroundColor = '#f5f5f5';\n        document.body.style.background = 'none';\n        document.body.style.backgroundColor = 'transparent';\n      }\n    };\n    const handleSettingsUpdate = () => {\n      console.log('Получено событие обновления настроек');\n      fetchSettings();\n    };\n\n    // Подписываемся на событие обновления настроек\n    window.addEventListener('settingsUpdated', handleSettingsUpdate);\n\n    // Загружаем настройки при монтировании\n    fetchSettings();\n\n    // Очистка при размонтировании\n    return () => {\n      document.documentElement.style.backgroundImage = 'none';\n      document.documentElement.style.backgroundColor = '#f5f5f5';\n      document.body.style.background = 'none';\n      document.body.style.backgroundColor = 'transparent';\n      window.removeEventListener('settingsUpdated', handleSettingsUpdate);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n};\n_s(BackgroundProvider, \"mCc1AI3nlnFR6PXJot/5Z7AXrOM=\");\n_c = BackgroundProvider;\nexport default BackgroundProvider;\nvar _c;\n$RefreshReg$(_c, \"BackgroundProvider\");","map":{"version":3,"names":["React","useEffect","useState","axios","getApiUrl","getMediaUrl","Fragment","_Fragment","jsxDEV","_jsxDEV","BackgroundProvider","children","_s","settings","setSettings","updateBackground","data","console","log","siteBackground","siteBackgroundImage","imageUrl","document","documentElement","style","backgroundImage","backgroundSize","backgroundPosition","backgroundAttachment","backgroundRepeat","backgroundColor","body","background","siteBackgroundColor","headerElement","querySelector","headerBackground","headerBackgroundImage","headerImageUrl","headerBackgroundColor","type","image","color","fetchSettings","response","get","error","handleSettingsUpdate","window","addEventListener","removeEventListener","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/Sait-znakomstv2/frontend/src/components/BackgroundProvider.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { getApiUrl, getMediaUrl } from '../config/api';\r\n\r\nconst BackgroundProvider = ({ children }) => {\r\n    const [settings, setSettings] = useState(null);\r\n\r\n    const updateBackground = (data) => {\r\n        console.log('Обновление фона с данными:', data);\r\n        \r\n        // Применяем фон сайта\r\n        if (data.siteBackground === 'image' && data.siteBackgroundImage) {\r\n            const imageUrl = getMediaUrl(data.siteBackgroundImage);\r\n            console.log('Применяем фоновое изображение сайта:', imageUrl);\r\n            \r\n            document.documentElement.style.backgroundImage = `url(${imageUrl})`;\r\n            document.documentElement.style.backgroundSize = 'cover';\r\n            document.documentElement.style.backgroundPosition = 'center';\r\n            document.documentElement.style.backgroundAttachment = 'fixed';\r\n            document.documentElement.style.backgroundRepeat = 'no-repeat';\r\n            document.documentElement.style.backgroundColor = 'transparent';\r\n            \r\n            // Убеждаемся, что body не перекрывает фон\r\n            document.body.style.background = 'none';\r\n            document.body.style.backgroundColor = 'transparent';\r\n        } else {\r\n            console.log('Применяем цветовой фон сайта:', data.siteBackgroundColor);\r\n            document.documentElement.style.backgroundImage = 'none';\r\n            document.documentElement.style.backgroundColor = data.siteBackgroundColor || '#f5f5f5';\r\n            document.body.style.background = 'none';\r\n            document.body.style.backgroundColor = 'transparent';\r\n        }\r\n\r\n        // Получаем элемент шапки\r\n        const headerElement = document.querySelector('.navigation');\r\n        if (headerElement) {\r\n            // Применяем фон шапки\r\n            if (data.headerBackground === 'image' && data.headerBackgroundImage) {\r\n                const headerImageUrl = getMediaUrl(data.headerBackgroundImage);\r\n                console.log('Применяем фоновое изображение шапки:', headerImageUrl);\r\n                \r\n                headerElement.style.backgroundImage = `url(${headerImageUrl})`;\r\n                headerElement.style.backgroundSize = 'cover';\r\n                headerElement.style.backgroundPosition = 'center';\r\n                headerElement.style.backgroundColor = 'transparent';\r\n            } else {\r\n                console.log('Применяем цветовой фон шапки:', data.headerBackgroundColor);\r\n                headerElement.style.backgroundImage = 'none';\r\n                headerElement.style.backgroundColor = data.headerBackgroundColor || '#ffffff';\r\n            }\r\n        }\r\n\r\n        console.log('Применены настройки фона:', {\r\n            type: data.siteBackground,\r\n            image: data.siteBackgroundImage,\r\n            color: data.siteBackgroundColor\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchSettings = async () => {\r\n            try {\r\n                console.log('Загрузка настроек фона...');\r\n                const response = await axios.get(getApiUrl('/api/site-settings'));\r\n                console.log('Получены настройки:', response.data);\r\n                setSettings(response.data);\r\n                updateBackground(response.data);\r\n            } catch (error) {\r\n                console.error('Ошибка при загрузке настроек фона:', error);\r\n                // Устанавливаем фон по умолчанию\r\n                document.documentElement.style.backgroundImage = 'none';\r\n                document.documentElement.style.backgroundColor = '#f5f5f5';\r\n                document.body.style.background = 'none';\r\n                document.body.style.backgroundColor = 'transparent';\r\n            }\r\n        };\r\n\r\n        const handleSettingsUpdate = () => {\r\n            console.log('Получено событие обновления настроек');\r\n            fetchSettings();\r\n        };\r\n\r\n        // Подписываемся на событие обновления настроек\r\n        window.addEventListener('settingsUpdated', handleSettingsUpdate);\r\n\r\n        // Загружаем настройки при монтировании\r\n        fetchSettings();\r\n\r\n        // Очистка при размонтировании\r\n        return () => {\r\n            document.documentElement.style.backgroundImage = 'none';\r\n            document.documentElement.style.backgroundColor = '#f5f5f5';\r\n            document.body.style.background = 'none';\r\n            document.body.style.backgroundColor = 'transparent';\r\n            window.removeEventListener('settingsUpdated', handleSettingsUpdate);\r\n        };\r\n    }, []);\r\n\r\n    return <>{children}</>;\r\n};\r\n\r\nexport default BackgroundProvider; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}