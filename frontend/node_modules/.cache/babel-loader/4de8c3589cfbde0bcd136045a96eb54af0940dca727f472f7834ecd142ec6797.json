{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nconst useGeolocation = () => {\n  _s();\n  const [location, setLocation] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Получение города по IP через внешний сервис\n  const getCityByIP = async () => {\n    try {\n      const response = await axios.get('https://ipapi.co/json/');\n      return {\n        city: response.data.city,\n        latitude: response.data.latitude,\n        longitude: response.data.longitude\n      };\n    } catch (error) {\n      console.error('Ошибка при определении города по IP:', error);\n      return null;\n    }\n  };\n  useEffect(() => {\n    const getLocation = async () => {\n      try {\n        const ipLocation = await getCityByIP();\n        if (ipLocation) {\n          setLocation(ipLocation);\n        } else {\n          setError('Не удалось определить город');\n        }\n      } catch (error) {\n        console.error('Ошибка при определении местоположения:', error);\n        setError('Ошибка при определении местоположения');\n      } finally {\n        setLoading(false);\n      }\n    };\n    getLocation();\n  }, []);\n  return {\n    location,\n    error,\n    loading\n  };\n};\n_s(useGeolocation, \"SDO+hqjOTxTHIbIxlN27liNwlw8=\");\nexport default useGeolocation;","map":{"version":3,"names":["useState","useEffect","axios","useGeolocation","_s","location","setLocation","error","setError","loading","setLoading","getCityByIP","response","get","city","data","latitude","longitude","console","getLocation","ipLocation"],"sources":["C:/Users/user/Desktop/sait-znakomstv/frontend/src/hooks/useGeolocation.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst useGeolocation = () => {\r\n  const [location, setLocation] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Получение города по IP через внешний сервис\r\n  const getCityByIP = async () => {\r\n    try {\r\n      const response = await axios.get('https://ipapi.co/json/');\r\n      return {\r\n        city: response.data.city,\r\n        latitude: response.data.latitude,\r\n        longitude: response.data.longitude\r\n      };\r\n    } catch (error) {\r\n      console.error('Ошибка при определении города по IP:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getLocation = async () => {\r\n      try {\r\n        const ipLocation = await getCityByIP();\r\n        if (ipLocation) {\r\n          setLocation(ipLocation);\r\n        } else {\r\n          setError('Не удалось определить город');\r\n        }\r\n      } catch (error) {\r\n        console.error('Ошибка при определении местоположения:', error);\r\n        setError('Ошибка при определении местоположения');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    getLocation();\r\n  }, []);\r\n\r\n  return { location, error, loading };\r\n};\r\n\r\nexport default useGeolocation; "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACA,MAAMW,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,wBAAwB,CAAC;MAC1D,OAAO;QACLC,IAAI,EAAEF,QAAQ,CAACG,IAAI,CAACD,IAAI;QACxBE,QAAQ,EAAEJ,QAAQ,CAACG,IAAI,CAACC,QAAQ;QAChCC,SAAS,EAAEL,QAAQ,CAACG,IAAI,CAACE;MAC3B,CAAC;IACH,CAAC,CAAC,OAAOV,KAAK,EAAE;MACdW,OAAO,CAACX,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC5D,OAAO,IAAI;IACb;EACF,CAAC;EAEDN,SAAS,CAAC,MAAM;IACd,MAAMkB,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACF,MAAMC,UAAU,GAAG,MAAMT,WAAW,CAAC,CAAC;QACtC,IAAIS,UAAU,EAAE;UACdd,WAAW,CAACc,UAAU,CAAC;QACzB,CAAC,MAAM;UACLZ,QAAQ,CAAC,6BAA6B,CAAC;QACzC;MACF,CAAC,CAAC,OAAOD,KAAK,EAAE;QACdW,OAAO,CAACX,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;QAC9DC,QAAQ,CAAC,uCAAuC,CAAC;MACnD,CAAC,SAAS;QACRE,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDS,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEd,QAAQ;IAAEE,KAAK;IAAEE;EAAQ,CAAC;AACrC,CAAC;AAACL,EAAA,CAzCID,cAAc;AA2CpB,eAAeA,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}